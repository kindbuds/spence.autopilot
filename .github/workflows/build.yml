# build.yml

name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 20

    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install dependencies and build the app for Windows
        run: |
          cd electron
          npm install
          npm run make

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-latest-build
          path: electron/out/*

  build-macos:
    runs-on: macos-latest
    timeout-minutes: 60

    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      TEAM_ID: ${{ secrets.TEAM_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode Version
        run: sudo xcode-select -switch /Applications/Xcode_15.0.app/Contents/Developer

      - name: Decode and save the certificate
        run: |
          echo "${{ secrets.MACOS_CERTIFICATE_P12_BASE64 }}" | base64 --decode > electron/developerID_application.p12

      - name: Create and unlock the keychain
        run: |
          security create-keychain -p actions build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p actions build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import electron/developerID_application.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k actions "/Users/runner/Library/Keychains/build.keychain-db"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          cd electron
          npm install

      - name: Build the App for macOS
        run: |
          cd electron
          npm run package

      - name: Sign the individual binaries
        run: |
          SIGN_ID="Developer ID Application: Kind Buds, LLC (SRJJDF6WDH)"
          APP_PATH="electron/out/Spence-AI-Career-Autopilot-darwin-arm64/Spence-AI-Career-Autopilot.app"
          ENTITLEMENTS="electron/entitlements.plist"

          # Sign the main binary
          codesign --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH/Contents/MacOS/Spence-AI-Career-Autopilot"

          # Sign each framework individually
          codesign --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH/Contents/Frameworks/Electron Framework.framework/Versions/A/Electron Framework"
          codesign --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH/Contents/Frameworks/ReactiveObjC.framework/Versions/A/ReactiveObjC"
          codesign --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH/Contents/Frameworks/Squirrel.framework/Versions/A/Squirrel"
          codesign --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH/Contents/Frameworks/Mantle.framework/Versions/A/Mantle"

      - name: Sign the entire App bundle
        run: |
          SIGN_ID="Developer ID Application: Kind Buds, LLC (SRJJDF6WDH)"
          APP_PATH="electron/out/Spence-AI-Career-Autopilot-darwin-arm64/Spence-AI-Career-Autopilot.app"
          ENTITLEMENTS="electron/entitlements.plist"

          codesign --deep --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH"

      - name: Verify the Main App Signature
        run: |
          APP_PATH="electron/out/Spence-AI-Career-Autopilot-darwin-arm64/Spence-AI-Career-Autopilot.app"
          codesign -vvv --deep --strict "$APP_PATH"

      - name: Package the App as a DMG
        run: |
          APP_PATH="electron/out/Spence-AI-Career-Autopilot-darwin-arm64/Spence-AI-Career-Autopilot.app"
          DMG_PATH="electron/out/Spence-AI-Career-Autopilot.dmg"

          hdiutil create "$DMG_PATH" -volname "Spence-AI-Career-Autopilot" -srcfolder "$APP_PATH" -ov -format UDZO

      - name: Sign the DMG
        run: |
          SIGN_ID="Developer ID Application: Kind Buds, LLC (SRJJDF6WDH)"
          DMG_PATH="electron/out/Spence-AI-Career-Autopilot.dmg"

          codesign --force --verbose --options runtime --timestamp --sign "$SIGN_ID" "$DMG_PATH"

      - name: Notarize the DMG
        run: |
          xcrun notarytool submit electron/out/Spence-AI-Career-Autopilot.dmg --apple-id "jeff.borden@kindbuds.us" --password "$APPLE_APP_SPECIFIC_PASSWORD" --team-id "SRJJDF6WDH" --wait

      - name: Staple the Notarization Ticket
        run: |
          xcrun stapler staple electron/out/Spence-AI-Career-Autopilot.dmg

      - name: Verify Stapling
        run: |
          xcrun stapler validate electron/out/Spence-AI-Career-Autopilot.dmg

      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: Spence-AI-Career-Autopilot.dmg
          path: electron/out/Spence-AI-Career-Autopilot.dmg

  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos]

    steps:
      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: Spence-Setup.exe
          path: ./dist

      - name: Download macOS DMG
        uses: actions/download-artifact@v4
        with:
          name: Spence-AI-Career-Autopilot.dmg
          path: ./dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/Spence-Setup.exe
            dist/Spence-AI-Career-Autopilot.dmg
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove source code artifacts from GitHub Release
        run: |
          gh release delete-asset ${{ github.ref_name }} $(gh release view ${{ github.ref_name }} --json assets -q '.assets[].name' | grep -E 'source_code.zip|source_code.tar.gz') --yes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
