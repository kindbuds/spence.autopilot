# build.yml

name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 20

    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      AMPLIFY_DOMAIN: ${{ secrets.AMPLIFY_DOMAIN }}
      GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}
      GA_API_SECRET: ${{ secrets.GA_API_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Create .env file with secrets
        run: |
          echo "NODE_ENV=production" >> electron/.env
          echo "AMPLIFY_DOMAIN=${{ secrets.AMPLIFY_DOMAIN }}" >> electron/.env
          echo "SPENCE_DOMAIN=${{ secrets.SPENCE_DOMAIN }}" >> electron/.env
          echo "GA_MEASUREMENT_ID=${{ secrets.GA_MEASUREMENT_ID }}" >> electron/.env
          echo "GA_API_SECRET=${{ secrets.GA_API_SECRET }}" >> electron/.env
          echo "API_BASE=${{ secrets.API_BASE }}" >> electron/.env
          echo "API_SPENCE=${{ secrets.API_SPENCE }}" >> electron/.env
          echo "API_API2=${{ secrets.API_API2 }}" >> electron/.env

      - name: Install dependencies and build the app for Windows
        run: |
          cd electron
          npm install
          npm run build

      - name: List dist Directory
        run: dir electron\dist
        shell: cmd

      - name: List nsis Directory
        run: dir electron\dist\nsis
        shell: cmd

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: Spence-AI-Career-Autopilot.exe
          path: electron/dist/nsis/Spence-AI-Career-Autopilot.exe
          if-no-files-found: error

      - name: Upload Windows latest.yml
        uses: actions/upload-artifact@v4
        with:
          name: latest.yml
          path: electron/dist/nsis/latest.yml
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    timeout-minutes: 60

    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      AMPLIFY_DOMAIN: ${{ secrets.AMPLIFY_DOMAIN }}
      GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}
      GA_API_SECRET: ${{ secrets.GA_API_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode Version
        run: sudo xcode-select -switch /Applications/Xcode_15.0.app/Contents/Developer

      - name: Decode and save the certificate
        run: |
          echo "${{ secrets.MACOS_CERTIFICATE_P12_BASE64 }}" | base64 --decode > electron/developerID_application.p12

      - name: Create and unlock the keychain
        run: |
          security create-keychain -p actions build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p actions build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import electron/developerID_application.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k actions "/Users/runner/Library/Keychains/build.keychain-db"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Create .env file with secrets
        run: |
          echo "NODE_ENV=production" >> electron/.env
          echo "AMPLIFY_DOMAIN=${{ secrets.AMPLIFY_DOMAIN }}" >> electron/.env
          echo "SPENCE_DOMAIN=${{ secrets.SPENCE_DOMAIN }}" >> electron/.env
          echo "GA_MEASUREMENT_ID=${{ secrets.GA_MEASUREMENT_ID }}" >> electron/.env
          echo "GA_API_SECRET=${{ secrets.GA_API_SECRET }}" >> electron/.env
          echo "API_BASE=${{ secrets.API_BASE }}" >> electron/.env
          echo "API_SPENCE=${{ secrets.API_SPENCE }}" >> electron/.env
          echo "API_API2=${{ secrets.API_API2 }}" >> electron/.env
          echo "APPLE_ID=${{ secrets.APPLE_ID  }}" >> electron/.env
          echo "APPLE_APP_SPECIFIC_PASSWORD=${{ secrets.APPLE_APP_SPECIFIC_PASSWORD  }}" >> electron/.env
          echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> electron/.env

      - name: Install dependencies
        run: |
          cd electron
          npm install

      - name: Build the App for macOS
        run: |
          cd electron
          npm run build

      - name: List contents of dist directory
        run: |
          echo "Listing contents of dist:"
          ls -la electron/dist

      # - name: Sign the individual binaries
      #   run: |
      #     SIGN_ID="Developer ID Application: Kind Buds, LLC (SRJJDF6WDH)"
      #     APP_PATH="electron/out/Spence-AI-Career-Autopilot-darwin-universal/Spence-AI-Career-Autopilot.app"
      #     ENTITLEMENTS="electron/entitlements.plist"

      #     # Sign the main binary
      #     codesign --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH/Contents/MacOS/Spence-AI-Career-Autopilot"

      #     # Sign each framework individually
      #     codesign --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH/Contents/Frameworks/Electron Framework.framework/Versions/A/Electron Framework"
      #     codesign --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH/Contents/Frameworks/ReactiveObjC.framework/Versions/A/ReactiveObjC"
      #     codesign --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH/Contents/Frameworks/Squirrel.framework/Versions/A/Squirrel"
      #     codesign --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH/Contents/Frameworks/Mantle.framework/Versions/A/Mantle"

      # - name: Sign the entire App bundle
      #   run: |
      #     SIGN_ID="Developer ID Application: Kind Buds, LLC (SRJJDF6WDH)"
      #     APP_PATH="electron/out/Spence-AI-Career-Autopilot-darwin-universal/Spence-AI-Career-Autopilot.app"
      #     ENTITLEMENTS="electron/entitlements.plist"

      #     # codesign --deep --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH"
      #     codesign --deep --force --verbose --options runtime --timestamp --entitlements "$ENTITLEMENTS" --sign "$SIGN_ID" "$APP_PATH"

      # - name: Verify the Main App Signature
      #   run: |
      #     APP_PATH="electron/out/Spence-AI-Career-Autopilot-darwin-universal/Spence-AI-Career-Autopilot.app"
      #     # codesign -vvv --deep --strict "$APP_PATH"
      #     codesign -vvv --deep --strict "$APP_PATH"

      # - name: Package the App as a DMG
      #   run: |
      #     APP_PATH="electron/out/Spence-AI-Career-Autopilot-darwin-universal/Spence-AI-Career-Autopilot.app"
      #     DMG_PATH="electron/out/Spence-AI-Career-Autopilot.dmg"

      #     hdiutil create "$DMG_PATH" -volname "Spence-AI-Career-Autopilot" -srcfolder "$APP_PATH" -ov -format UDZO

      # - name: Sign the DMG
      #   run: |
      #     SIGN_ID="Developer ID Application: Kind Buds, LLC (SRJJDF6WDH)"
      #     DMG_PATH="electron/out/Spence-AI-Career-Autopilot.dmg"

      #     codesign --force --verbose --options runtime --timestamp --sign "$SIGN_ID" "$DMG_PATH"

      - name: Notarize the DMG
        run: |
          xcrun notarytool submit electron/dist/Spence-AI-Career-Autopilot.dmg --apple-id "jeff.borden@kindbuds.us" --password "arss-lgut-shmy-ipjl" --team-id "SRJJDF6WDH" --wait

      - name: Staple the Notarization Ticket
        run: |
          xcrun stapler staple electron/dist/Spence-AI-Career-Autopilot.dmg

      - name: Verify Stapling
        run: |
          xcrun stapler validate electron/dist/Spence-AI-Career-Autopilot.dmg

      # - name: Upload macOS DMG
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: Spence-AI-Career-Autopilot.dmg
      #     path: electron/out/Spence-AI-Career-Autopilot.dmg

      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: Spence-AI-Career-Autopilot.dmg
          path: electron/dist/Spence-AI-Career-Autopilot.dmg
          if-no-files-found: error
      
      - name: Upload mac-latest.yml
        uses: actions/upload-artifact@v4
        with:
          name: latest-mac.yml
          path: electron/dist/latest-mac.yml
          if-no-files-found: error

  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos]

    env:
      GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

    steps:
      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: Spence-AI-Career-Autopilot.exe
          path: ./dist

      - name: Download macOS DMG
        uses: actions/download-artifact@v4
        with:
          name: Spence-AI-Career-Autopilot.dmg
          path: ./dist

      - name: List contents of dist directory
        run: |
          echo "Listing contents of dist:"
          ls -la dist

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/Spence-AI-Career-Autopilot.exe
            dist/latest.yml
            dist/Spence-AI-Career-Autopilot.dmg
            dist/latest-mac.yml
          draft: false
          prerelease: false

      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Remove source code assets from GitHub Release
        run: |
          ASSETS=$(gh release view ${{ github.ref_name }} --json assets --jq '.assets[] | select(.name | test("source_code")) | .id')
          for ASSET_ID in $ASSETS; do
            gh release delete-asset ${{ github.ref_name }} $ASSET_ID
          done
